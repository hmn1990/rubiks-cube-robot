#ifndef TABLE_H
#define TABLE_H
#include <stdbool.h>
#include <stdint.h>
#include <inttypes.h>
enum UtilMoves
{
    Ux1 = 0,
    Ux2 = 1,
    Ux3 = 2,
    Rx1 = 3,
    Rx2 = 4,
    Rx3 = 5,
    Fx1 = 6,
    Fx2 = 7,
    Fx3 = 8,
    Dx1 = 9,
    Dx2 = 10,
    Dx3 = 11,
    Lx1 = 12,
    Lx2 = 13,
    Lx3 = 14,
    Bx1 = 15,
    Bx2 = 16,
    Bx3 = 17,
};
    
enum UtilFacelets
{
    U1 = 0,
    U2 = 1,
    U3 = 2,
    U4 = 3,
    U5 = 4,
    U6 = 5,
    U7 = 6,
    U8 = 7,
    U9 = 8,

    R1 = 9,
    R2 = 10,
    R3 = 11,
    R4 = 12,
    R5 = 13,
    R6 = 14,
    R7 = 15,
    R8 = 16,
    R9 = 17,

    F1 = 18,
    F2 = 19,
    F3 = 20,
    F4 = 21,
    F5 = 22,
    F6 = 23,
    F7 = 24,
    F8 = 25,
    F9 = 26,

    D1 = 27,
    D2 = 28,
    D3 = 29,
    D4 = 30,
    D5 = 31,
    D6 = 32,
    D7 = 33,
    D8 = 34,
    D9 = 35,

    L1 = 36,
    L2 = 37,
    L3 = 38,
    L4 = 39,
    L5 = 40,
    L6 = 41,
    L7 = 42,
    L8 = 43,
    L9 = 44,
    
    B1 = 45,
    B2 = 46,
    B3 = 47,
    B4 = 48,
    B5 = 49,
    B6 = 50,
    B7 = 51,
    B8 = 52,
    B9 = 53,
};

enum UtilColors
{
    U = 0,
    R = 1,
    F = 2,
    D = 3,
    L = 4,
    B = 5,
};

// from Search.java
#define USE_TWIST_FLIP_PRUN  true
// Options for research purpose.
#define MAX_PRE_MOVES  20
#define TRY_INVERSE  true
#define TRY_THREE_AXES true
#define USE_COMBP_PRUN USE_TWIST_FLIP_PRUN
#define USE_CONJ_PRUN USE_TWIST_FLIP_PRUN
#define MIN_P1LENGTH_PRE 7
#define MAX_DEPTH2 12
// Verbose_Mask determines if a " . " separates the phase1 and phase2 parts of the solver string like in F' R B R L2 F . U2 U D for example.<br>
#define USE_SEPARATOR 0x1
// Verbose_Mask determines if the solution will be inversed to a scramble/state generator.
#define INVERSE_SOLUTION 0x2
// Verbose_Mask determines if a tag such as "(21f)" will be appended to the solution.
#define APPEND_LENGTH 0x4
// Verbose_Mask determines if guaranteeing the solution to be optimal.
#define OPTIMAL_SOLUTION 0x8

// from CoordCube.java
#define N_MOVES   18
#define N_MOVES2  10

#define N_SLICE  495
#define N_TWIST  2187
#define N_TWIST_SYM  324
#define N_FLIP  2048
#define N_FLIP_SYM  336
#define N_PERM  40320
#define N_PERM_SYM  2768
#define N_MPERM  24
#define N_COMB  (USE_COMBP_PRUN ? 140 : 70)
#define P2_PARITY_MOVE  (USE_COMBP_PRUN ? 0xA5 : 0)

typedef struct structSolution {
    int32_t length;
    int32_t depth1;
    int32_t verbose;
    int32_t urfIdx;
    int32_t moves[31];
    bool initOK;// == true表示已经初始化
} Solution;

typedef struct structCubieCube {
    int8_t ca[8];
    int8_t ea[12];
} CubieCube;

    
typedef struct structCoordCube {
    int32_t twist;
    int32_t tsym;
    int32_t flip;
    int32_t fsym;
    int32_t slice;
    int32_t prun;

    int32_t twistc;
    int32_t flipc;
} CoordCube;

typedef struct structSearch
{
    int32_t move[31];
    CoordCube nodeUD[21];
    CoordCube nodeRL[21];
    CoordCube nodeFB[21];
    int64_t selfSym;
    int32_t conjMask;
    int32_t urfIdx;
    int32_t length1;
    int32_t depth1;
    int32_t maxDep2;
    int32_t solLen;
    Solution solution;
    int64_t probe;
    int64_t probeMax;
    int64_t probeMin;
    int32_t verbose;
    int32_t valid1;
    bool allowShorter;
    CubieCube cc;
    CubieCube urfCubieCube[6];
    CoordCube urfCoordCube[6];
    CubieCube phase1Cubie[21];
    CubieCube preMoveCubes[MAX_PRE_MOVES + 1];
    int32_t preMoves [MAX_PRE_MOVES];
    int32_t preMoveLen;
    int32_t maxPreMoves;
    bool isRec;
} Search;


extern const CubieCube CubieCubeUrf1;
extern const CubieCube CubieCubeUrf2;

// 16 symmetries generated by S_F2, S_U4 and S_LR2
extern const CubieCube CubieCubeCubeSym [16];
// 18 move cubes
extern const CubieCube CubieCubeMoveCube[18];


extern const int32_t UtilCnk[13][13];
extern const int32_t UtilUd2std[18];
extern const int32_t UtilStd2ud[18];
extern const int32_t UtilCkmv2bit[11];

extern const int64_t CubieCubeMoveCubeSym[18];
extern const int32_t CubieCubeFirstMoveSym[48];
extern const int32_t CubieCubeSymMult[16][16];
extern const int32_t CubieCubeSymMultInv[16][16];
extern const int32_t CubieCubeSymMove[16][18];
extern const int32_t CubieCubeSym8Move[8 * 18];
extern const int32_t CubieCubeSymMoveUD[16][18];
extern const int8_t  CubieCubeUrfMove[6][18];

extern const uint16_t CubieCubePermInvEdgeSym[2768];
//extern const uint16_t CubieCubeFlipS2R[336];
//extern const uint16_t CubieCubeTwistS2R[324];
//extern const uint16_t CubieCubeEPermS2R[2768];
extern const uint16_t CubieCubeFlipR2S[2048];
extern const uint16_t CubieCubeTwistR2S[2187];
extern const uint16_t CubieCubeEPermR2S[40320];
extern const int8_t  CubieCubePerm2CombP[2768];
extern const int8_t  CubieCubeMPermInv[24];
//extern const uint16_t CubieCubePermInvEdgeSy[2768];
extern const uint16_t CoordCubeUDSliceMove[495][18];
extern const uint16_t CoordCubeTwistMove[324][18];
extern const uint16_t CoordCubeFlipMove[336][18];
extern const uint16_t CoordCubeUDSliceConj[495][8];
extern const int32_t CoordCubeUDSliceTwistPrun[20048];
extern const int32_t CoordCubeUDSliceFlipPrun[20791];
extern const uint16_t CoordCubeCPermMove[2768][10];
extern const uint16_t CoordCubeEPermMove[2768][10];
extern const uint16_t CoordCubeMPermMove[24][10];
extern const uint16_t CoordCubeMPermConj[24][16];
extern const uint16_t CoordCubeCCombPConj[140][16];
extern const int32_t CoordCubeMCPermPrun[8305];
extern const int32_t CoordCubeEPermCCombPPrun[48441];
extern const uint16_t CubieCubeFlipS2RF[2688];
extern const int32_t CoordCubeTwistFlipPrun[82945];

#endif
